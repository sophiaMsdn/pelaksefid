/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package ir.aria.pelaksefid.domain.model;

import ir.aria.pelaksefid.domain.entity.Advertise;
import ir.aria.pelaksefid.domain.entity.base.Base;
import ir.aria.pelaksefid.domain.enumaration.AdvertiseStateEnm;
import ir.aria.pelaksefid.domain.model.base.BaseDto;
import ir.aria.pelaksefid.domain.query.model.AdvertiseModel;
import ir.aria.pelaksefid.utility.ValidationUtil;
import java.math.BigDecimal;
import lombok.Getter;
import lombok.Setter;

/**
 *
 * @author Mana2
 */
@Getter
@Setter
public class AdvertiseDto extends BaseDto {

    private String id;
    private String accountCellNumber;
    private String sigma;
    private String price;
    private String mileage;
    private String mileageState;
    private String comment;
    private String advertiseState;
    private String advertiseStateText;
    private String carTypeId;
    private String carTypeDescription;
    private String regionId;
    private String cityId;
    private String provinceId;
    private String regionDescription;
    private String cityDescription;
    private String manufactureYearId;
    private String persianYear;
    private String miladiYear;
    private String carBodyStatusId;
    private String carBodyStatusDescription;
    private String carColorId;
    private String carColorDescription;
    private String carTrimColorId;
    private String carTrimColorDescription;
    private String carCylinderDescription;
    private String carDifferentialDescription;
    private String carGearDescription;
    private String carId;
    private String brand;
    private String model;
    private String type;
    private String registerDate;
    private String updateDate;
    private String bodyStatus;
    private String agencyName;
    private DocumentDto[] documents;

    public String getStateText(String state) {
        if (state.equals(AdvertiseStateEnm.REGISTERED.name())) {
            return "ثبت شده";
        } else if (state.equals(AdvertiseStateEnm.CONFIRM.name())) {
            return "تاييد شده";
        } else if (state.equals(AdvertiseStateEnm.REJECTED.name())) {
            return "عدم تاييد";
        } else if (state.equals(AdvertiseStateEnm.WAITING.name())) {
            return "در انتظار بروزرساني";
        }
        return "";
    }

    @Override
    public Boolean isValid() {
        if (ValidationUtil.isEmpty(carTypeId)) {
            return false;
        }
        if (ValidationUtil.isEmpty(regionId)) {
            return false;
        }
        if (ValidationUtil.isEmpty(manufactureYearId)) {
            return false;
        }
        if (ValidationUtil.isEmpty(carBodyStatusId)) {
            return false;
        }
        if (ValidationUtil.isEmpty(carColorId)) {
            return false;
        }
        if (ValidationUtil.isEmpty(carTrimColorId)) {
            return false;
        }
        return true;
    }

    @Override
    public Base toEntity() {
        Advertise ent = new Advertise();
        return toEntity(ent);
    }

    @Override
    public Base toEntity(Base e) {
        Advertise ent = (Advertise) e;
        if (!ValidationUtil.isEmpty(price)) {
            ent.setPrice(BigDecimal.valueOf(Double.valueOf(price)));
        } else {
            ent.setPrice(BigDecimal.ZERO);
        }
        ent.setComment(comment);
        ent.setIsAlive(Boolean.TRUE);
        return ent;
    }

    @Override
    public void fromEntity(Base e) {
        Advertise ent = (Advertise) e;
        id = String.valueOf(ent.getId());
        price = ent.getPrice().toPlainString();
        mileage = ent.getCar().getMileage().toPlainString();
        comment = ent.getComment();
        advertiseState = ent.getAdvertiseState().name();
        carTypeId = ent.getCar().getCarType().getId().toString();
        carTypeDescription = ent.getCar().getCarType().getDescription();
        regionId = ent.getRegion().getId().toString();
        regionDescription = ent.getRegion().getDescription();
        manufactureYearId = ent.getCar().getManufactureYear().getId().toString();
        persianYear = ent.getCar().getManufactureYear().getPersianYear().toString();
        miladiYear = ent.getCar().getManufactureYear().getMiladiYear().toString();
        carBodyStatusId = ent.getCar().getCarBodyStatus().getId().toString();
        carBodyStatusDescription = ent.getCar().getCarBodyStatus().getDescription();
        carColorId = ent.getCar().getCarColor().getId().toString();
        carColorDescription = ent.getCar().getCarColor().getDescription();
        carTrimColorId = ent.getCar().getCarTrimColor().getId().toString();
        carTrimColorDescription = ent.getCar().getCarTrimColor().getDescription();
        brand = ent.getCar().getCarType().getCarModel().getBrand().getId().toString();
        model = ent.getCar().getCarType().getCarModel().getId().toString();
        type = ent.getCar().getCarType().getId().toString();
        bodyStatus = ent.getCar().getCarBodyStatus().getId().toString();
        cityId = ent.getRegion().getParent() != null ? ent.getRegion().getParent().getId().toString() : "";
        provinceId = ent.getRegion().getParent().getParent() != null ? ent.getRegion().getParent().getParent().getId().toString() : "";
    }

    public void fromModel(AdvertiseModel m) {
        id = m.getId();
        accountCellNumber = m.getAccountCellNumber();
        agencyName = m.getAgencyName();
        sigma = m.getSigma();
        brand = m.getBrand();
        model = m.getCarModel();
        type = m.getCarType();
        price = m.getPrice();
        mileage = m.getMileage();
        comment = m.getAdComment();
        advertiseState = m.getAdvertiseState();
        advertiseStateText = getStateText(m.getAdvertiseState());
        carTypeDescription = m.getCarType();
        cityDescription = m.getCity();
        regionDescription = m.getRegion();
        persianYear = m.getPersianYear();
        miladiYear = m.getMiladiYear();
        carBodyStatusDescription = m.getBodyStatus();
        registerDate = m.getRegisterDate();
        updateDate = m.getUpdateDate();
        carColorDescription = m.getColor();
        carTrimColorDescription = m.getTrimColor();
        carCylinderDescription = m.getCylinder();
        carDifferentialDescription = m.getDifferential();
        carGearDescription = m.getGear();
        try {
            if (m.getDocuments() != null) {
                String[] docs = m.getDocuments().split("\\|");
                DocumentDto[] ads = new DocumentDto[docs.length];
                int cntr = 0;
                for (String f : docs) {
                    String[] doc = f.split("\\*");
                    DocumentDto ad = new DocumentDto();
                    ad.setId(doc[0]);
                    ad.setFileType(doc[1]);
                    ads[cntr++] = ad;
                }
                documents = ads;
            }
        } catch (Exception ex) {
        }
        try {
            if (m.getSigmaDocuments() != null) {
                String[] docs = m.getSigmaDocuments().split("\\|");
                DocumentDto[] ads = new DocumentDto[docs.length];
                int cntr = 0;
                for (String f : docs) {
                    String[] doc = f.split("\\*");
                    DocumentDto ad = new DocumentDto();
                    ad.setId(doc[0]);
                    ad.setDocId(doc[1]);
                    ads[cntr++] = ad;
                }
                documents = ads;
            }
        } catch (Exception ex) {
        }
    }
}
