/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package ir.aria.pelaksefid.web.v1;

import ir.aria.pelaksefid.domain.entity.Agency;
import ir.aria.pelaksefid.domain.entity.AgencyType;
import ir.aria.pelaksefid.domain.enumaration.ResultEnm;
import ir.aria.pelaksefid.domain.model.AgencyDto;
import ir.aria.pelaksefid.domain.model.AgencyTypeDto;
import ir.aria.pelaksefid.service.AgencyService;
import ir.aria.pelaksefid.web.v1.model.request.AgencyReq;
import ir.aria.pelaksefid.web.v1.model.request.base.BaseReq;
import ir.aria.pelaksefid.web.v1.model.response.AgencyRes;
import ir.aria.pelaksefid.web.v1.model.response.AgencyTypesRes;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

/**
 *
 * @author Mana2
 */
@RestController
@RequestMapping(path = "${apiv1}/agencies",
        consumes = MediaType.APPLICATION_JSON_VALUE,
        produces = MediaType.APPLICATION_JSON_VALUE,
        method = {RequestMethod.POST})
public class AgencyController {

    @Autowired
    private AgencyService service;

    @PostMapping(path = "/insertAgency")
    public AgencyRes insertAgency(@RequestBody AgencyReq req,
            HttpServletRequest request) {

        AgencyRes res = new AgencyRes();

        ResultEnm rslt = service.validateBeforeSave(req);
        if (!rslt.equals(ResultEnm.OK)) {
            res.setStatus(rslt.ordinal());
            res.setMessage(rslt.name());
            return res;
        }

        Agency agency = service.controlAndSave(req, request);

        if (agency == null) {
            res.setStatus(ResultEnm.GENERAL_ERROR.ordinal());
            res.setMessage(ResultEnm.GENERAL_ERROR.name());
            return res;
        }

        AgencyDto agencyDto = new AgencyDto();
        agencyDto.fromEntity(agency);
        res.setAgency(agencyDto);
        res.setStatus(ResultEnm.OK.ordinal());
        res.setMessage(ResultEnm.OK.name());
        return res;
    }

    @PostMapping(path = "/getAgencyTypes")
    public AgencyTypesRes getAgencyTypes(@RequestBody BaseReq req,
            HttpServletRequest request) {

        AgencyTypesRes res = new AgencyTypesRes();

        List<AgencyType> agencyTypes = service.getAgencyTypes(req);

        if (agencyTypes == null) {
            res.setStatus(ResultEnm.GENERAL_ERROR.ordinal());
            res.setMessage(ResultEnm.GENERAL_ERROR.name());
            return res;
        }

        AgencyTypeDto[] agencyTypeDtos = new AgencyTypeDto[agencyTypes.size()];
        int cntr = 0;
        for (AgencyType d : agencyTypes) {
            AgencyTypeDto agencyTypeDto = new AgencyTypeDto();
            agencyTypeDto.fromEntity(d);
            agencyTypeDtos[cntr++] = agencyTypeDto;
        }
        res.setCount(String.valueOf(agencyTypes.size()));
        res.setAgencyTypes(agencyTypeDtos);
        res.setStatus(ResultEnm.OK.ordinal());
        res.setMessage(ResultEnm.OK.name());
        return res;
    }

    @PostMapping(path = "/getAgencyInfo")
    public AgencyRes getAgencyInfo(@RequestBody BaseReq req,
            HttpServletRequest request) {

        AgencyRes res = new AgencyRes();

        AgencyDto agency = service.getAgencyInfo(req, request);

        if (agency == null) {
            res.setStatus(ResultEnm.OK.ordinal());
            res.setMessage(ResultEnm.OK.name());
            return res;
        }

        res.setAgency(agency);
        res.setStatus(ResultEnm.OK.ordinal());
        res.setMessage(ResultEnm.OK.name());
        return res;
    }
}
