/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package ir.aria.pelaksefid.web.management.v1;

import ir.aria.pelaksefid.domain.enumaration.AdvertiseStateEnm;
import ir.aria.pelaksefid.domain.enumaration.ResultEnm;
import ir.aria.pelaksefid.domain.repository.AdvertiseRepository;
import ir.aria.pelaksefid.web.v1.model.request.base.BaseReq;
import ir.aria.pelaksefid.web.v1.model.response.DashboardCountRes;
import javax.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

/**
 *
 * @author Mana2
 */
@RestController
@RequestMapping(path = "${mngapiv1}/configurations",
        consumes = MediaType.APPLICATION_JSON_VALUE,
        produces = MediaType.APPLICATION_JSON_VALUE,
        method = {RequestMethod.POST})
public class ConfigurationManagementController {

    @Autowired
    private AdvertiseRepository advertiseRepository;

    @PostMapping(path = "/getDashboardCount")
    public DashboardCountRes getDashboardCount(@RequestBody BaseReq req,
            HttpServletRequest request) {
        DashboardCountRes res = new DashboardCountRes();
        Long allCount = advertiseRepository.countBySigmaAndIsActiveAndIsAlive(Boolean.FALSE, Boolean.TRUE, Boolean.TRUE);
        Long registeredCount = advertiseRepository.countBySigmaAndIsActiveAndIsAliveAndAdvertiseState(Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, AdvertiseStateEnm.REGISTERED);
        Long waitingCount = advertiseRepository.countBySigmaAndIsActiveAndIsAliveAndAdvertiseState(Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, AdvertiseStateEnm.WAITING);
        Long rejectedCount = advertiseRepository.countBySigmaAndIsActiveAndIsAliveAndAdvertiseState(Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, AdvertiseStateEnm.REJECTED);
        res.setAllAdvertise(allCount.toString());
        res.setRegisteredAdvertise(registeredCount.toString());
        res.setWaitingAdvertise(waitingCount.toString());
        res.setRejectedAdvertise(rejectedCount.toString());
        res.setMessage(ResultEnm.OK.name());
        res.setStatus(ResultEnm.OK.ordinal());
        return res;
    }
}
