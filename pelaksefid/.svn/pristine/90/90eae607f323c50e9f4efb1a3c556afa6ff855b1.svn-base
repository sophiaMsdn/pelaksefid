/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package ir.aria.pelaksefid.service;

import ir.aria.pelaksefid.domain.entity.Account;
import ir.aria.pelaksefid.domain.entity.Advertise;
import ir.aria.pelaksefid.domain.entity.AdvertiseDocument;
import ir.aria.pelaksefid.domain.entity.Car;
import ir.aria.pelaksefid.domain.entity.CarBodyStatus;
import ir.aria.pelaksefid.domain.entity.CarColor;
import ir.aria.pelaksefid.domain.entity.CarTrimColor;
import ir.aria.pelaksefid.domain.entity.CarType;
import ir.aria.pelaksefid.domain.entity.Document;
import ir.aria.pelaksefid.domain.entity.ManufactureYear;
import ir.aria.pelaksefid.domain.entity.Region;
import ir.aria.pelaksefid.domain.entity.User;
import ir.aria.pelaksefid.domain.enumaration.AdvertiseOperationEnm;
import ir.aria.pelaksefid.domain.enumaration.AdvertiseStateEnm;
import ir.aria.pelaksefid.domain.enumaration.ResultEnm;
import ir.aria.pelaksefid.domain.model.AdvertiseDto;
import ir.aria.pelaksefid.domain.model.DocumentDto;
import ir.aria.pelaksefid.domain.query.model.AdvertiseFilter;
import ir.aria.pelaksefid.domain.query.model.AdvertiseModel;
import ir.aria.pelaksefid.domain.repository.AdvertiseDocumentRepository;
import ir.aria.pelaksefid.domain.repository.AdvertiseRepository;
import ir.aria.pelaksefid.domain.repository.CarBodyStatusRepository;
import ir.aria.pelaksefid.domain.repository.CarColorRepository;
import ir.aria.pelaksefid.domain.repository.CarRepository;
import ir.aria.pelaksefid.domain.repository.CarTrimColorRepository;
import ir.aria.pelaksefid.domain.repository.CarTypeRepository;
import ir.aria.pelaksefid.domain.repository.DocumentRepository;
import ir.aria.pelaksefid.domain.repository.ManufactureYearRepository;
import ir.aria.pelaksefid.domain.repository.RegionRepository;
import ir.aria.pelaksefid.service.base.BaseService;
import ir.aria.pelaksefid.utility.DateFormatUtil;
import ir.aria.pelaksefid.utility.ValidationUtil;
import ir.aria.pelaksefid.web.v1.model.request.AdvertiseFilterReq;
import ir.aria.pelaksefid.web.v1.model.request.AdvertiseReq;
import java.math.BigDecimal;
import java.util.Optional;
import javax.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 *
 * @author Mana2
 */
@Service
public class AdvertiseService extends BaseService {

    @Autowired
    private AdvertiseRepository repository;
    @Autowired
    private AccountService accountService;
    @Autowired
    private CarTypeRepository carTypeRepository;
    @Autowired
    private RegionRepository regionRepository;
    @Autowired
    private ManufactureYearRepository manufactureYearRepository;
    @Autowired
    private CarBodyStatusRepository carBodyStatusRepository;
    @Autowired
    private CarColorRepository carColorRepository;
    @Autowired
    private CarTrimColorRepository carTrimColorRepository;
    @Autowired
    private DocumentRepository documentRepository;
    @Autowired
    private AdvertiseDocumentRepository advertiseDocumentRepository;
    @Autowired
    private AdvertiseHistoryService historyService;
    @Autowired
    private CarRepository carRepository;

    public ResultEnm validateBeforeSave(AdvertiseReq req) {
        if (req == null) {
            return ResultEnm.INVALID_INPUT;
        }
        if (req.getAdvertise() == null) {
            return ResultEnm.INVALID_INPUT;
        }
        if (!req.getAdvertise().isValid()) {
            return ResultEnm.INVALID_INPUT;
        }
        return ResultEnm.OK;
    }

    @Transactional
    public Advertise controlAndSave(AdvertiseReq req, HttpServletRequest request) {

        if (req == null) {
            return null;
        }
        AdvertiseDto advertiseDto = req.getAdvertise();
        if (req.getAdvertise() == null) {
            return null;
        }
        Account account = accountService.getAccountByBaseReq(req);
        if (account == null) {
            return null;
        }
        Advertise advertise = (Advertise) advertiseDto.toEntity();
        advertise.setAdvertiseState(AdvertiseStateEnm.REGISTERED);
        advertise.setAccount(account);
        Optional<CarType> carType = carTypeRepository.findById(Long.valueOf(advertiseDto.getCarTypeId()));
        if (!carType.isPresent()) {
            return null;
        }
        Optional<Region> region = regionRepository.findById(Long.valueOf(advertiseDto.getRegionId()));
        if (!region.isPresent()) {
            return null;
        }
        advertise.setRegion(region.get());
        Car car = new Car();
        Optional<ManufactureYear> manufactureYear = manufactureYearRepository.findById(Long.valueOf(advertiseDto.getManufactureYearId()));
        if (!manufactureYear.isPresent()) {
            return null;
        }
        car.setManufactureYear(manufactureYear.get());
        Optional<CarBodyStatus> carBodyStatus = carBodyStatusRepository.findById(Long.valueOf(advertiseDto.getCarBodyStatusId()));
        if (!carBodyStatus.isPresent()) {
            return null;
        }
        car.setCarBodyStatus(carBodyStatus.get());
        Optional<CarColor> carColor = carColorRepository.findById(Long.valueOf(advertiseDto.getCarColorId()));
        if (!carColor.isPresent()) {
            return null;
        }
        car.setCarColor(carColor.get());
        Optional<CarTrimColor> carTrimColor = carTrimColorRepository.findById(Long.valueOf(advertiseDto.getCarTrimColorId()));
        if (!carTrimColor.isPresent()) {
            return null;
        }
        if (!ValidationUtil.isEmpty(advertiseDto.getMileage())) {
            car.setMileage(BigDecimal.valueOf(Double.valueOf(advertiseDto.getMileage())));
        } else {
            car.setMileage(BigDecimal.ZERO);
        }
        car.setCarTrimColor(carTrimColor.get());
        car.setCarType(carType.get());
        car = (Car) logEntity(car, request);
        carRepository.save(car);
        advertise.setCar(car);
        advertise.setSigma(Boolean.FALSE);
        advertise = (Advertise) logEntity(advertise, request);
        advertise = repository.save(advertise);
        for (DocumentDto d : advertiseDto.getDocuments()) {
            Document document = (Document) d.toEntity();
            document = documentRepository.save(document);
            AdvertiseDocument advertiseDocument = new AdvertiseDocument();
            advertiseDocument.setDocId(document.getId());
            advertiseDocument.setAdvertise(advertise);
            advertiseDocument.setIsActive(Boolean.TRUE);
            advertiseDocument.setIsAlive(Boolean.TRUE);
            advertiseDocument = (AdvertiseDocument) logEntity(advertiseDocument, request);
            advertiseDocumentRepository.save(advertiseDocument);
        }
        historyService.insertHistory(advertise,
                AdvertiseOperationEnm.REGISTERED,
                account.getCellNumber(),
                account.getId().toString(),
                null,
                DateFormatUtil.getCurrentPersianDate(),
                DateFormatUtil.getCurrentTime(),
                request);
        return advertise;
    }

    public ResultEnm validateBeforeConfirm(AdvertiseReq req) {
        if (req == null) {
            return ResultEnm.INVALID_INPUT;
        }
        if (req.getAdvertise() == null) {
            return ResultEnm.INVALID_INPUT;
        }
        if (ValidationUtil.isEmpty(req.getAdvertise().getId())) {
            return ResultEnm.INVALID_INPUT;
        }
        return ResultEnm.OK;
    }

    @Transactional
    public Advertise controlAndConfirm(AdvertiseReq req, HttpServletRequest request) {
        if (req == null) {
            return null;
        }
        if (req.getAdvertise() == null) {
            return null;
        }
        if (ValidationUtil.isEmpty(req.getAdvertise().getId())) {
            return null;
        }
        Optional<Advertise> optional = repository.findById(Long.valueOf(req.getAdvertise().getId()));
        if (!optional.isPresent()) {
            return null;
        }
        User user = getUserByToken(request);
        Advertise advertise = optional.get();
        advertise.setAdvertiseState(AdvertiseStateEnm.CONFIRM);
        advertise = (Advertise) logEntity(advertise, request);
        historyService.insertHistory(advertise,
                AdvertiseOperationEnm.CONFIRM,
                user.getUsername(),
                user.getId().toString(),
                null,
                DateFormatUtil.getCurrentPersianDate(),
                DateFormatUtil.getCurrentTime(),
                request);
        return repository.save(advertise);
    }

    public Page<AdvertiseModel> getAllAdvertisesByFilter(AdvertiseFilterReq req, HttpServletRequest request) {

        AdvertiseFilter filter = new AdvertiseFilter();

        if (req.getBrandIds() != null) {
            String[] brandsIds = req.getBrandIds().split(",");
            filter.setBrandIds(brandsIds);
        }
        if (req.getModelIds() != null) {
            String[] modelIds = req.getModelIds().split(",");
            filter.setModelIds(modelIds);
        }
        if (req.getTypeIds() != null) {
            String[] typeIds = req.getTypeIds().split(",");
            filter.setTypeIds(typeIds);
        }
        if (req.getCityIds() != null) {
            String[] cityIds = req.getCityIds().split(",");
            filter.setCityIds(cityIds);
        }
        filter.setPriceFrom(req.getPriceFrom());
        String[] states = new String[1];
        states[0] = AdvertiseStateEnm.CONFIRM.name();
        filter.setStates(states);
        filter.setPriceTo(req.getPriceTo());
        filter.setManufactureFrom(req.getManufactureFrom());
        filter.setManufactureTo(req.getManufactureTo());
        filter.setMileageFrom(req.getMileageFrom());
        filter.setMileageTo(req.getMileageTo());
        if (!ValidationUtil.isEmpty(req.getBodyIds())) {
            String[] bodyIds = req.getBodyIds().split(",");
            filter.setBodyIds(bodyIds);
        }
        if (!ValidationUtil.isEmpty(req.getColorIds())) {
            String[] colorIds = req.getColorIds().split(",");
            filter.setColorIds(colorIds);
        }
        if (!ValidationUtil.isEmpty(req.getBodyStatusIds())) {
            String[] bodyStatusIds = req.getBodyStatusIds().split(",");
            filter.setBodyStatusIds(bodyStatusIds);
        }
        if (!ValidationUtil.isEmpty(req.getGearIds())) {
            String[] gearIds = req.getGearIds().split(",");
            filter.setGearIds(gearIds);
        }
        if (!ValidationUtil.isEmpty(req.getFuelIds())) {
            String[] fuelIds = req.getFuelIds().split(",");
            filter.setFuelIds(fuelIds);
        }
        if (!ValidationUtil.isEmpty(req.getCylinderIds())) {
            String[] cylinderIds = req.getCylinderIds().split(",");
            filter.setCylinderIds(cylinderIds);
        }
        if (!ValidationUtil.isEmpty(req.getDifferentialIds())) {
            String[] differentialIds = req.getDifferentialIds().split(",");
            filter.setDifferentialIds(differentialIds);
        }
        if (!ValidationUtil.isEmpty(req.getEngineIds())) {
            String[] engineIds = req.getEngineIds().split(",");
            filter.setEngineIds(engineIds);
        }
        if (!ValidationUtil.isEmpty(req.getTrimColorIds())) {
            String[] trimColorIds = req.getTrimColorIds().split(",");
            filter.setTrimColorIds(trimColorIds);
        }
        if (!ValidationUtil.isEmpty(req.getOriginIds())) {
            String[] originIds = req.getOriginIds().split(",");
            filter.setOriginIds(originIds);
        }
        Integer page = 1;
        Integer rows = 10;
        if (!ValidationUtil.isEmpty(req.getPn())) {
            page = Integer.valueOf(req.getPn());
        }
        if (!ValidationUtil.isEmpty(req.getPl())) {
            rows = Integer.valueOf(req.getPl());
        }
        return repository.getAdvertisesByFilter(filter,
                PageRequest.of(page - 1, rows));
    }

    public Page<AdvertiseModel> getPrivateAdvertisesByFilter(AdvertiseFilterReq req, HttpServletRequest request) {

        AdvertiseFilter filter = new AdvertiseFilter();

        if (req.getTypeIds() != null) {
            String[] typeIds = req.getTypeIds().split(",");
            filter.setTypeIds(typeIds);
        }
        if (req.getCityIds() != null) {
            String[] cityIds = req.getCityIds().split(",");
            filter.setCityIds(cityIds);
        }
        filter.setPriceFrom(req.getPriceFrom());
        filter.setPriceTo(req.getPriceTo());
        filter.setManufactureFrom(req.getManufactureFrom());
        filter.setManufactureTo(req.getManufactureTo());
        filter.setMileageFrom(req.getMileageFrom());
        filter.setMileageTo(req.getMileageTo());
        filter.setSigma("0");
        if (!ValidationUtil.isEmpty(req.getBodyIds())) {
            String[] bodyIds = req.getBodyIds().split(",");
            filter.setBodyIds(bodyIds);
        }
        if (!ValidationUtil.isEmpty(req.getColorIds())) {
            String[] colorIds = req.getColorIds().split(",");
            filter.setColorIds(colorIds);
        }
        if (!ValidationUtil.isEmpty(req.getBodyStatusIds())) {
            String[] bodyStatusIds = req.getBodyStatusIds().split(",");
            filter.setBodyStatusIds(bodyStatusIds);
        }
        if (!ValidationUtil.isEmpty(req.getGearIds())) {
            String[] gearIds = req.getGearIds().split(",");
            filter.setGearIds(gearIds);
        }
        if (!ValidationUtil.isEmpty(req.getFuelIds())) {
            String[] fuelIds = req.getFuelIds().split(",");
            filter.setFuelIds(fuelIds);
        }
        if (!ValidationUtil.isEmpty(req.getCylinderIds())) {
            String[] cylinderIds = req.getCylinderIds().split(",");
            filter.setCylinderIds(cylinderIds);
        }
        if (!ValidationUtil.isEmpty(req.getDifferentialIds())) {
            String[] differentialIds = req.getDifferentialIds().split(",");
            filter.setDifferentialIds(differentialIds);
        }
        if (!ValidationUtil.isEmpty(req.getEngineIds())) {
            String[] engineIds = req.getEngineIds().split(",");
            filter.setEngineIds(engineIds);
        }
        if (!ValidationUtil.isEmpty(req.getTrimColorIds())) {
            String[] trimColorIds = req.getTrimColorIds().split(",");
            filter.setTrimColorIds(trimColorIds);
        }
        if (!ValidationUtil.isEmpty(req.getOriginIds())) {
            String[] originIds = req.getOriginIds().split(",");
            filter.setOriginIds(originIds);
        }
        Integer page = 1;
        Integer rows = 10;
        if (!ValidationUtil.isEmpty(req.getPn())) {
            page = Integer.valueOf(req.getPn());
        }
        if (!ValidationUtil.isEmpty(req.getPl())) {
            rows = Integer.valueOf(req.getPl());
        }
        return repository.getAdvertisesByFilter(filter,
                PageRequest.of(page - 1, rows));
    }

    public Page<AdvertiseModel> getAccountAdvertisesByFilter(AdvertiseFilterReq req, HttpServletRequest request) {

        AdvertiseFilter filter = new AdvertiseFilter();

        Account account = accountService.getAccountByBaseReq(req);
        if (account == null) {
            return null;
        }
        filter.setAccountId(account.getId().toString());
        if (req.getTypeIds() != null) {
            String[] typeIds = req.getTypeIds().split(",");
            filter.setTypeIds(typeIds);
        }
        if (req.getCityIds() != null) {
            String[] cityIds = req.getCityIds().split(",");
            filter.setCityIds(cityIds);
        }
        filter.setPriceFrom(req.getPriceFrom());
        filter.setPriceTo(req.getPriceTo());
        filter.setManufactureFrom(req.getManufactureFrom());
        filter.setManufactureTo(req.getManufactureTo());
        filter.setMileageFrom(req.getMileageFrom());
        filter.setMileageTo(req.getMileageTo());
        if (!ValidationUtil.isEmpty(req.getBodyIds())) {
            String[] bodyIds = req.getBodyIds().split(",");
            filter.setBodyIds(bodyIds);
        }
        if (!ValidationUtil.isEmpty(req.getColorIds())) {
            String[] colorIds = req.getColorIds().split(",");
            filter.setColorIds(colorIds);
        }
        if (!ValidationUtil.isEmpty(req.getBodyStatusIds())) {
            String[] bodyStatusIds = req.getBodyStatusIds().split(",");
            filter.setBodyStatusIds(bodyStatusIds);
        }
        if (!ValidationUtil.isEmpty(req.getGearIds())) {
            String[] gearIds = req.getGearIds().split(",");
            filter.setGearIds(gearIds);
        }
        if (!ValidationUtil.isEmpty(req.getFuelIds())) {
            String[] fuelIds = req.getFuelIds().split(",");
            filter.setFuelIds(fuelIds);
        }
        if (!ValidationUtil.isEmpty(req.getCylinderIds())) {
            String[] cylinderIds = req.getCylinderIds().split(",");
            filter.setCylinderIds(cylinderIds);
        }
        if (!ValidationUtil.isEmpty(req.getDifferentialIds())) {
            String[] differentialIds = req.getDifferentialIds().split(",");
            filter.setDifferentialIds(differentialIds);
        }
        if (!ValidationUtil.isEmpty(req.getEngineIds())) {
            String[] engineIds = req.getEngineIds().split(",");
            filter.setEngineIds(engineIds);
        }
        if (!ValidationUtil.isEmpty(req.getTrimColorIds())) {
            String[] trimColorIds = req.getTrimColorIds().split(",");
            filter.setTrimColorIds(trimColorIds);
        }
        if (!ValidationUtil.isEmpty(req.getOriginIds())) {
            String[] originIds = req.getOriginIds().split(",");
            filter.setOriginIds(originIds);
        }
        Integer page = 1;
        Integer rows = 10;
        if (!ValidationUtil.isEmpty(req.getPn())) {
            page = Integer.valueOf(req.getPn());
        }
        if (!ValidationUtil.isEmpty(req.getPl())) {
            rows = Integer.valueOf(req.getPl());
        }
        return repository.getAdvertisesByFilter(filter,
                PageRequest.of(page - 1, rows));
    }
}
